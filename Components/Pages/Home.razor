@page "/"
@using Bogus
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Web
@inject ILogger<Home> Logger
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
@using System.Text

<PageTitle>Fake User Data Generator</PageTitle>

<h1 class="text-center text-secondary py-5 text-uppercase">User Data Generator</h1>
<div class="container bg-secondary rounded py-3 mb-5">
    <div class="row">
        <div class="col-12 col-md-3 mb-3 mb-md-0">
            <div class="d-flex align-items-center">
                <label class="form-label text-white me-2 mb-0">Region:</label>
                <select class="form-select" @bind="selectedRegion" @bind:event="oninput" @onchange="OnRegionChange">
                    <option value="USA">USA</option>
                    <option value="Poland">Poland</option>
                    <option value="Georgia">Georgia</option>
                </select>
            </div>
        </div>
        <div class="col-12 col-md-3 mb-3 mb-md-0">
            <div class="d-flex align-items-center">
                <label class="form-label text-white me-2 mb-0">Errors:</label>
                <div class="d-flex align-items-center">
                    <input type="range" class="form-range me-2" @bind="errorRate" min="0" max="10" step="1" @oninput="OnSliderInput" />
                    <input type="number" class="form-control w-100" @bind="errorRateInput" min="0" max="10" step="1" @oninput="OnNumberInput" style="width: 80px;" />
                </div>
            </div>
        </div>
        <div class="col-12 col-md-3 mb-3 mb-md-0">
            <div class="d-flex align-items-center">
                <label class="form-label text-white me-2 mb-0">Seed:</label>
                <div class="input-group">
                    <input type="number" class="form-control" value="@seedValue" @oninput="HandleSeedInput" />
                    <button class="btn btn-primary" @onclick="GenerateSeed"><i class="bi bi-shuffle"></i></button>
                </div>
            </div>
        </div>
        <div class="col-12 col-md-3 mb-3 mb-md-0">
            <div class="d-flex align-items-center">
                <label class="form-label text-white me-2 mb-0"></label>
                <div class="input-group">
                    <button class="btn btn-success w-100 form-control my-0" @onclick="ExportData">Export <i class="bi bi-file-earmark-arrow-down-fill"></i></button>
                </div>
            </div>
        </div>
    </div>
</div>

<table class="table table-striped table-bordered table-hover table-sm rounded">
    <thead class="table-light">
        <tr>
            <th>Index</th>
            <th>Identifier</th>
            <th>Name</th>
            <th>Address</th>
            <th>Phone</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var user in users.Take(recordCount))
        {
            <tr>
                <td>@user.Index</td>
                <td>@user.Identifier</td>
                <td>@user.Name</td>
                <td>@user.Address</td>
                <td>@user.Phone</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private string selectedRegion = "USA";
    private List<UserData> users = new();
    private Dictionary<int, string> identifierMap = new(); // Store identifiers for persistence
    private int recordCount = 20;
    private bool isLoading = false;
    private double errorRate = 0; // Slider value (0-10)
    private double errorRateInput = 0; // Number input value (0-1000)
    private int? seedValue;

    private async Task ExportData()
    {
        var csvContent = GenerateCsv();
        await JSRuntime.InvokeVoidAsync("downloadFile", "userdata.csv", csvContent);
    }

    private string GenerateCsv()
    {
        var csv = new StringBuilder();
        csv.AppendLine("Index,Identifier,Name,Address,Phone");

        foreach (var user in users)
        {
            csv.AppendLine($"{user.Index},{user.Identifier},\"{user.Name}\",\"{user.Address}\",\"{user.Phone}\"");
        }

        return csv.ToString();
    }

    private void HandleSeedInput(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int result))
        {
            seedValue = result;
            GenerateData();
        }
        else
        {
            seedValue = null;
            users.Clear(); // Clear the users list if the seed value is null or empty
        }
    }

    private void GenerateSeed()
    {
        seedValue = new Random().Next(1, 100000);
        GenerateData();
    }

    private void OnRegionChange(ChangeEventArgs e)
    {
        selectedRegion = e.Value?.ToString() ?? "USA";
        GenerateData();
    }

    protected override void OnInitialized()
    {
        if (!seedValue.HasValue)
        {
            GenerateSeed();
        }
        else
        {
            GenerateData();
        }
    }

    private void OnSliderInput(ChangeEventArgs e)
    {
        if (double.TryParse(e.Value?.ToString(), out double value))
        {
            errorRate = value;
            errorRateInput = errorRate * 100; // Sync number input with slider value
            GenerateData(); // Re-generate data whenever an error input changes
        }
    }

    private void OnNumberInput(ChangeEventArgs e)
    {
        if (double.TryParse(e.Value?.ToString(), out double value))
        {
            if (value > 1000)
            {
                value = 1000; // Cap the value at 1000
            }
            errorRateInput = value;
            errorRate = errorRateInput / 100.0; // Convert to slider range
            GenerateData(); // Re-generate data whenever an error input changes
        }
    }

    private void GenerateData()
    {
        users.Clear();

        if (seedValue.HasValue && seedValue.Value > 0)
        {
            Randomizer.Seed = new Random(seedValue.Value);
        }
        else
        {
            seedValue = new Random().Next(1, 100000); // Generate a random seed if the input is invalid
            Randomizer.Seed = new Random(seedValue.Value);
        }

        var faker = new Faker(GetLocale(selectedRegion));
        var random = new Random(seedValue.Value); // Use the same seed for consistency

        users = Enumerable.Range(1, recordCount).Select(index =>
        {
            var user = new UserData
                {
                    Index = index,
                    Identifier = string.Join("", faker.Random.Digits(10)),
                    Name = $"{faker.Name.FirstName()} {faker.Name.FirstName()} {faker.Name.LastName()}", // Include middle name
                    Address = GenerateAddress(faker, selectedRegion, random),
                    Phone = GeneratePhone(faker, selectedRegion, random)
                };

            IntroduceErrors(user, random);

            identifierMap[index] = user.Identifier;

            return user;
        }).ToList();
    }

    private void IntroduceErrors(UserData user, Random random)
    {
        if (errorRate == 0.5)
        {
            if (random.NextDouble() < 0.5) // 50% probability
            {
                var field = random.Next(3);
                switch (field)
                {
                    case 0:
                        user.Name = IntroduceError(user.Name);
                        break;
                    case 1:
                        user.Address = IntroduceError(user.Address);
                        break;
                    case 2:
                        user.Phone = IntroduceError(user.Phone);
                        break;
                }
            }
        }
        else
        {
            for (int i = 0; i < errorRateInput; i++)
            {
                var field = random.Next(3);
                switch (field)
                {
                    case 0:
                        user.Name = IntroduceError(user.Name);
                        break;
                    case 1:
                        user.Address = IntroduceError(user.Address);
                        break;
                    case 2:
                        user.Phone = IntroduceError(user.Phone);
                        break;
                }
            }
        }
    }

    private string GenerateAddress(Faker faker, string region, Random random)
    {
        var format = random.Next(3); // Randomly choose between three formats

        return region switch
        {
            "USA" => format switch
            {
                0 => $"{faker.Address.BuildingNumber()} {faker.Address.StreetName()}, {faker.Address.City()}, {faker.Address.StateAbbr()} {faker.Address.ZipCode()}",
                1 => $"{faker.Address.City()}, {faker.Address.StreetName()} {faker.Address.BuildingNumber()}, {faker.Address.StateAbbr()} {faker.Address.ZipCode()}",
                _ => $"{faker.Address.StreetName()} {faker.Address.BuildingNumber()}, Apt {faker.Address.SecondaryAddress()}, {faker.Address.City()}, {faker.Address.StateAbbr()} {faker.Address.ZipCode()}"
            },
            "Poland" => format switch
            {
                0 => $"{faker.Address.StreetName()} {faker.Address.BuildingNumber()}, {faker.Address.ZipCode("##-###")} {faker.Address.City()}, Poland",
                1 => $"{faker.Address.City()}, {faker.Address.StreetName()} {faker.Address.BuildingNumber()}, {faker.Address.ZipCode("##-###")}, Poland",
                _ => $"{faker.Address.StreetName()} {faker.Address.BuildingNumber()}, {faker.Address.City()}, {faker.Address.ZipCode("##-###")}, Poland"
            },
            "Georgia" => format switch
            {
                0 => $"{faker.Address.StreetName()} {faker.Address.BuildingNumber()}, {faker.Address.City()}, Georgia {faker.Address.ZipCode("####")}",
                1 => $"{faker.Address.City()}, {faker.Address.StreetName()} {faker.Address.BuildingNumber()}, Georgia {faker.Address.ZipCode("####")}",
                _ => $"{faker.Address.StreetName()} {faker.Address.BuildingNumber()}, {faker.Address.City()}, {faker.Address.ZipCode("####")}, Georgia"
            },
            _ => faker.Address.FullAddress()
        };
    }

    private string GeneratePhone(Faker faker, string region, Random random)
    {
        var format = random.Next(3); // Randomly choose between three formats

        return region switch
        {
            "USA" => format switch
            {
                0 => faker.Phone.PhoneNumber("(###) ###-####"),
                1 => faker.Phone.PhoneNumber("+1-###-###-####"),
                _ => faker.Phone.PhoneNumber("###-###-####")
            },
            "Poland" => format switch
            {
                0 => faker.Phone.PhoneNumber("## ### ## ##"),
                1 => faker.Phone.PhoneNumber("+48 ## ### ## ##"),
                _ => faker.Phone.PhoneNumber("###-###-###")
            },
            "Georgia" => format switch
            {
                0 => faker.Phone.PhoneNumber("5## ### ###"),
                1 => faker.Phone.PhoneNumber("+995 5## ### ###"),
                _ => faker.Phone.PhoneNumber("###-##-##-##")
            },
            _ => faker.Phone.PhoneNumber()
        };
    }

    private string IntroduceError(string input)
    {
        if (string.IsNullOrEmpty(input)) return input;

        var errorChance = new Random().NextDouble();
        if (errorChance < 0.33) return DeleteCharacter(input);
        if (errorChance < 0.66) return AddRandomCharacter(input);
        return SwapCharacters(input);
    }

    private string DeleteCharacter(string input)
    {
        if (string.IsNullOrEmpty(input)) return input;
        int index = new Random().Next(0, input.Length);
        return input.Remove(index, 1);
    }

    private string AddRandomCharacter(string input)
    {
        if (input == null) return input;
        const string alphabet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        char randomChar = alphabet[new Random().Next(alphabet.Length)];
        int index = new Random().Next(0, input.Length + 1);
        return input.Insert(index, randomChar.ToString());
    }

    private string SwapCharacters(string input)
    {
        if (string.IsNullOrWhiteSpace(input) || input.Length < 2) return input;
        int index = new Random().Next(0, input.Length - 1);
        var charArray = input.ToCharArray();
        (charArray[index], charArray[index + 1]) = (charArray[index + 1], charArray[index]);
        return new string(charArray);
    }

    private string GetLocale(string region)
    {
        return region switch
        {
            "USA" => "en_US",
            "Poland" => "pl",
            "Georgia" => "ge",
            _ => "en_US" // Default value to ensure non-null return
        };
    }

    private DotNetObjectReference<Home>? dotNetHelper;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetHelper = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("Helpers.setDotNetHelper", dotNetHelper);
            await JSRuntime.InvokeVoidAsync("initSimpleScrollHandler");
        }
    }

    [JSInvokable("LoadMoreData")]
    public async Task LoadMoreData()
    {
        Logger.LogInformation("LoadMoreData invoked");
        if (!isLoading)
        {
            isLoading = true;
            recordCount += 10; // Increment record count by 10
            GenerateData();     // Re-generate data based on new count
            isLoading = false;
            await InvokeAsync(StateHasChanged);  // Trigger UI refresh
        }
    }

    public void Dispose()
    {
        dotNetHelper?.Dispose();
    }

    private class UserData
    {
        public int Index { get; set; }
        public string? Identifier { get; set; }
        public string? Name { get; set; }
        public string? Address { get; set; }
        public string? Phone { get; set; }
    }
}

<script>
    if (!window.Helpers) {
        class Helpers {
            static dotNetHelper;

            static setDotNetHelper(value) {
                Helpers.dotNetHelper = value;
            }

            static async loadMoreData() {
                console.log("loadMoreData called");
                await Helpers.dotNetHelper.invokeMethodAsync('LoadMoreData');
            }
        }

        window.Helpers = Helpers;

        window.initSimpleScrollHandler = () => {
            window.onscroll = async () => {
                if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight) {
                    console.log("Bottom of page reached");
                    await Helpers.loadMoreData();
                }
            };
        };
    }

    function downloadFile(fileName, content) {
        const blob = new Blob([content], { type: 'text/csv' });
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.download = fileName;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
</script>